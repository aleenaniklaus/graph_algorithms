Week 2 Information Gathering

General:
GitLab tuts/docs:
- Commandline: https://docs.gitlab.com/ee/gitlab-basics/start-using-git.html
Python graph implementation (helpful links in order of helfulness, top being most!)
- https://www.python-course.eu/graphs_python.php
- https://www.python-course.eu/networkx.php
- https://www.python-course.eu/pygraph.php
- https://www.python.org/doc/essays/graphs/
- https://www.geeksforgeeks.org/generate-graph-using-dictionary-python/


List of potentially helpful repos/libraries
1. igraph (generating graphs)
2. cairo (drawing graphs)
3. Graphviz (highlight for future interactive software for webapp)
4. SciPy (uses sparce matricies to represent graphs)


IGRAPH
- graph generator
- trees
- deterministic 
- stochastic
- regular lattics
- rings
- extended chordal rings
- several other famous graphs
Misc:
- requires pip for linux
- check what os John is using: Windows


helpful documentation/tuts for igraph
- https://igraph.org/python/doc/tutorial/tutorial.html

From Tutorial above: 
igraph includes a large set of graph generators which can be divided into two 
groups: deterministic (i.e. K3,3) and stochastic (i.e. random graph on 11 verts)
graph generators. Deterministic generators produce the same graph if 
you call them with exactly the same parameters, while 
stochastic generators produce a different graph every time. Deterministic 
generators include methods for creating trees, regular lattices (grid formation),
rings, extended chordal rings, several famous graphs and so on, 
while stochastic generators are used to create Erdős-Rényi random networks(flip coin),
Barabási-Albert networks (randomly generated), geometric random graphs and such.
igraph has too many generators to cover them all in this
tutorial, so we will only try a deterministic and a stochastic generator instead

Sudo - API documentation:
- https://igraph.org/python/doc/igraph-module.html

CAIRO
igraph uses cairo to visualize their graphs, but we may find a use for this library in the case where igraph is not visualizing what we need implicitly.
- API: https://www.cairographics.org/manual/
- example: https://www.cairographics.org/samples/
- written in C

GRAPHVIZ
- relies on DOT language
- API(python): https://graphviz.gitlab.io/_pages/pdf/gv.3python.pdf
- publications: http://www.graphviz.org/theory/

SCIPY
- https://docs.scipy.org/doc/scipy-0.15.1/reference/sparse.csgraph.html
- python with heavy use of Numpy objects
- Algorithms supported:
    - connected components
    - laplacian
    - shortest path
    - dijkstra
    - floyd warshall
    - bellman ford
    - johnson's algorithm
    - bredth first order (ing)
    - depth first order (ing)
    - breadth first tree
    - depth first tree
    - MST
    
Week 3
Found repository that implements checking planarity:
https://github.com/hagberg/planarity/blob/master/doc/source/index.rst~

They reference someone from google? I am not sure but the link is suggestive:
http://code.google.com/p/planarity/